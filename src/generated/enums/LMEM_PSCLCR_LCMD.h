/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM4
{

enum class LMEM_PSCLCR_LCMD : uint8_t
{
    search_rw /*!< Search and read or write */,
    invalidate = 1 /*!< Invalidate */,
    push = 2 /*!< Push */,
    clear = 3 /*!< Clear */
};
static_assert(sizeof(LMEM_PSCLCR_LCMD) == 1);

/**
 * Converts LMEM_PSCLCR_LCMD to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(LMEM_PSCLCR_LCMD instance)
{
    const char *result = "UNKNOWN LMEM_PSCLCR_LCMD";

    switch (instance)
    {
    case LMEM_PSCLCR_LCMD::search_rw:
        result = "search_rw";
        break;
    case LMEM_PSCLCR_LCMD::invalidate:
        result = "invalidate";
        break;
    case LMEM_PSCLCR_LCMD::push:
        result = "push";
        break;
    case LMEM_PSCLCR_LCMD::clear:
        result = "clear";
        break;
    }

    return result;
}

/**
 * Converts a C string to LMEM_PSCLCR_LCMD.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, LMEM_PSCLCR_LCMD &output)
{
    bool result = false;

    if ((result = !strncmp(data, "search_rw", 9)))
    {
        output = LMEM_PSCLCR_LCMD::search_rw;
    }
    else if ((result = !strncmp(data, "invalidate", 10)))
    {
        output = LMEM_PSCLCR_LCMD::invalidate;
    }
    else if ((result = !strncmp(data, "push", 4)))
    {
        output = LMEM_PSCLCR_LCMD::push;
    }
    else if ((result = !strncmp(data, "clear", 5)))
    {
        output = LMEM_PSCLCR_LCMD::clear;
    }

    return result;
}

}; // namespace MIMXRT1176::CM4
